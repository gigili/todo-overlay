{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "TaskList.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import TaskList from './TaskList.svelte';\nimport { createStore } from './items.store';\nimport ComfyJS from \"comfy.js\";\n;\nimport { fillDefaults, queryStringToQueryOptions } from \"./utils\";\n// Query Options\n// - ChannelName to listen to\n// - listening command (default: todo)\nconst queryOptions = fillDefaults(queryStringToQueryOptions(location.search));\nconsole.warn({ queryOptions });\nlet currentHighlightedIndex = -1;\nconst { items, taskListOptions } = createStore(queryOptions.command);\nComfyJS.onCommand = (user, command, message, flags, extra) => {\n    if ((flags.broadcaster || flags.mod) && command === queryOptions.command) {\n        const [subCommand, ...content] = message.split(' ');\n        const realContent = content.join(' ');\n        switch (subCommand) {\n            case \"new\": {\n                // TODO extract item store operations\n                items.set([]);\n                taskListOptions.update(() => {\n                    return {\n                        name: realContent\n                    };\n                });\n                break;\n            }\n            case \"remove\": {\n                const indexId = stringIdToIndexId(realContent);\n                if (indexId < 0) {\n                    return;\n                }\n                items.update(curItems => {\n                    if (indexId < curItems.length) {\n                        const removedItems = curItems.splice(indexId, 1);\n                        return curItems;\n                    }\n                    return curItems;\n                });\n                break;\n            }\n            case \"cleanup\": {\n                const indexId = stringIdToIndexId(realContent);\n                if (indexId < 0) {\n                    return;\n                }\n                items.update(curItems => {\n                    return curItems.filter(item => !item.done);\n                });\n                break;\n            }\n            case \"toggle\": {\n                const indexId = stringIdToIndexId(realContent);\n                if (indexId < 0) {\n                    return;\n                }\n                items.update(curItems => {\n                    if (indexId < curItems.length) {\n                        const foundItem = curItems[indexId];\n                        foundItem.done = !foundItem.done;\n                    }\n                    return curItems;\n                });\n                break;\n            }\n            case \"highlight\": {\n                const indexId = stringIdToIndexId(realContent);\n                if (currentHighlightedIndex === indexId) {\n                    currentHighlightedIndex = -1;\n                }\n                else {\n                    currentHighlightedIndex = indexId;\n                }\n                break;\n            }\n            case \"edit\": {\n                const [targetIndex, ...newTextAr] = realContent.split(' ');\n                const realText = newTextAr.join(' ');\n                const indexId = stringIdToIndexId(targetIndex);\n                if (indexId < 0) {\n                    return;\n                }\n                console.info({ targetIndex, indexId, realText });\n                items.update(curItems => {\n                    if (indexId < curItems.length) {\n                        const foundItem = curItems[indexId];\n                        foundItem.label = realText;\n                    }\n                    return curItems;\n                });\n                break;\n            }\n            case \"color\": {\n                const [targetIndex, ...newTextAr] = realContent.split(' ');\n                const realText = newTextAr.join(' ');\n                const indexId = stringIdToIndexId(targetIndex);\n                if (indexId < 0) {\n                    return;\n                }\n                console.info({ targetIndex, indexId, realText });\n                items.update(curItems => {\n                    if (indexId < curItems.length) {\n                        const foundItem = curItems[indexId];\n                        if (realText.startsWith(\"#\") || realText.startsWith(\"rgb\")) {\n                            foundItem.colorStyle = `color: ${realText}`;\n                        }\n                        else {\n                            foundItem.colorStyle = \"\";\n                            foundItem.colorName = realText;\n                        }\n                    }\n                    return curItems;\n                });\n                break;\n            }\n            case \"move\": {\n                const [currentIndexStr, targetIndexStr] = realContent.split(' ');\n                const currentIndex = stringIdToIndexId(currentIndexStr);\n                const targetIndex = stringIdToIndexId(targetIndexStr);\n                if (currentIndex < 0 || targetIndex < 0) {\n                    return;\n                }\n                console.info({ currentIndex, targetIndex });\n                items.update(curItems => {\n                    moveArray(curItems, currentIndex, targetIndex);\n                    return curItems;\n                });\n                break;\n            }\n            case \"name\": {\n                // todo list name\n                taskListOptions.update(curObj => {\n                    curObj.name = realContent;\n                    return curObj;\n                });\n                break;\n            }\n            case \"add\": {\n                const newItem = {\n                    label: realContent,\n                    done: false,\n                    colorName: '',\n                    colorStyle: null\n                };\n                // option: add newones to the top\n                items.update(curItems => [...curItems, newItem]);\n                break;\n            }\n            default: {\n                const newItem = {\n                    label: message,\n                    done: false,\n                    colorName: '',\n                    colorStyle: null\n                };\n                // option: add newones to the top\n                items.update(curItems => [...curItems, newItem]);\n                break;\n            }\n        }\n        console.log(\"!todo was typed in chat\", user, message, flags, extra, subCommand, realContent);\n    }\n};\nComfyJS.Init(queryOptions.channelName);\nlet currentItems;\nconst unsubscribe = items.subscribe(value => {\n    currentItems = value;\n});\nlet taskListOptionsObj;\nconst unsubOptions = taskListOptions.subscribe(value => {\n    taskListOptionsObj = value;\n});\n// todo move functions to utils\nfunction stringIdToIndexId(stringId) {\n    const parsedId = +stringId;\n    if (typeof parsedId === 'number') {\n        const indexId = parsedId - 1;\n        if (indexId >= 0) {\n            return indexId;\n        }\n    }\n    return null;\n}\nfunction moveArray(arr, from, to) {\n    arr.splice(to, 0, arr.splice(from, 1)[0]);\n}\n</script>\n\n<main>\n\n  <TaskList items={currentItems} taskListName={taskListOptionsObj.name}\n            scrollingDuration={queryOptions.scrollingDuration}\n            scrollingInterval={queryOptions.scrollingInterval}\n            highlightItemIndex={currentHighlightedIndex}\n            />\n\n</main>\n\n<!-- NES.css minified -->\n<link href=\"https://unpkg.com/nes.css@2.3.0/css/nes.min.css\" rel=\"stylesheet\" />\n\n<!-- Press Start 2P - pixelated font <3 -->\n<link href=\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\" rel=\"stylesheet\">\n\n<style>\n  body {\n    overflow: hidden;\n  }\n\n  * {\n      /* https://fonts.google.com/specimen/Press+Start+2P?query=Press+Start+2P */\n    font-family: 'Press Start 2P', Arial, sans-serif;\n  }</style>\n",
    "<script lang=\"ts\">;\nimport * as animateScroll from \"svelte-scrollto\";\nimport { onMount } from \"svelte\";\nexport let taskListName;\nexport let items;\nexport let highlightItemIndex = -1;\nexport let scrollingInterval = 5000;\nexport let scrollingDuration = 2000;\n// TODO Either add scrolling up / down\n// TODO or reverse items list\nlet itemsListElement;\nonMount(() => {\n    var scrollToTop = false;\n    setInterval(() => {\n        if (scrollToTop) {\n            animateScroll.scrollToTop({\n                container: itemsListElement,\n                duration: scrollingDuration\n            });\n        }\n        else {\n            animateScroll.scrollToBottom({\n                container: itemsListElement,\n                duration: scrollingDuration\n            });\n        }\n        scrollToTop = !scrollToTop;\n    }, scrollingInterval);\n});\n</script>\n\n<div class=\"nes-container is-dark with-title\">\n  <p class=\"title\">{taskListName}</p>\n\n  <div class=\"items-holder {highlightItemIndex !== -1 ? 'currently-highlighting' : '' }\"\n       bind:this={itemsListElement}>\n  {#each items as item, _index}\n\n      <label class=\"entry {item.done ? 'entry-done' : ''} {_index === highlightItemIndex ? 'entry-highlight' : ''}\" >\n\n\n        <input type=\"checkbox\" class=\"nes-checkbox is-dark\" checked={item.done} />\n        <span class=\"label-with-number\">\n          <div style=\"display: inline-block\">\n            <span class=\"nes-text label is-{item.colorName}\" style=\"{item.colorStyle}\">\n            {item.label}\n            </span>\n            <span class=\"nes-text is-warning\">\n              [#{_index + 1}]\n            </span>\n          </div>\n        </span>\n    </label>\n\n    {/each}\n\n    <label class=\"entry\">\n      &nbsp;\n    </label>\n\n        </div>\n</div>\n\n<style>\n  .nes-container {\n    height: calc(100vh - 8px);\n    padding-bottom: 0;\n  }\n\n  .entry {\n    display: flex;\n  }\n\n  .entry:last-of-type {\n    height: 0.5rem;\n  }\n\n  .entry-done {\n    opacity: 0.55;\n  }\n\n  .entry-done .label {\n    text-decoration: line-through;\n  }\n\n  /*TODO  add scss for easier style code */\n\n  .currently-highlighting .entry.entry-highlight {\n\n  }\n\n  .currently-highlighting .entry:not(.entry-highlight) {\n    opacity: 0.55;\n  }\n\n  .items-holder {\n    height: 100%;\n    overflow-y: hidden;\n    margin-left: -1rem;\n  }\n\n  .label-with-number {\n    max-width: 80vw;\n    display: inline-flex;\n  }\n\n  .nes-container.with-title>.title {\n    margin-bottom: 0;\n  }\n\n  .nes-checkbox+span::before, .nes-checkbox:checked+span::before {\n    top: 2px !important;\n  }</style>\n"
  ],
  "names": [],
  "mappings": "AAiNE,eAAE,CAAC,AAED,WAAW,CAAE,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,AAClD,CAAC;ACpJD,cAAc,4BAAC,CAAC,AACd,MAAM,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CACzB,cAAc,CAAE,CAAC,AACnB,CAAC,AAED,MAAM,4BAAC,CAAC,AACN,OAAO,CAAE,IAAI,AACf,CAAC,AAED,kCAAM,aAAa,AAAC,CAAC,AACnB,MAAM,CAAE,MAAM,AAChB,CAAC,AAED,WAAW,4BAAC,CAAC,AACX,OAAO,CAAE,IAAI,AACf,CAAC,AAED,yBAAW,CAAC,MAAM,cAAC,CAAC,AAClB,eAAe,CAAE,YAAY,AAC/B,CAAC,AAQD,qCAAuB,CAAC,oBAAM,KAAK,gBAAgB,CAAC,AAAC,CAAC,AACpD,OAAO,CAAE,IAAI,AACf,CAAC,AAED,aAAa,4BAAC,CAAC,AACb,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,KAAK,AACpB,CAAC,AAED,kBAAkB,4BAAC,CAAC,AAClB,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,WAAW,AACtB,CAAC,AAED,cAAc,yBAAW,CAAC,MAAM,cAAC,CAAC,AAChC,aAAa,CAAE,CAAC,AAClB,CAAC,AAED,aAAa,CAAC,gCAAI,QAAQ,CAAE,aAAa,QAAQ,CAAC,gCAAI,QAAQ,AAAC,CAAC,AAC9D,GAAG,CAAE,GAAG,CAAC,UAAU,AACrB,CAAC"
}